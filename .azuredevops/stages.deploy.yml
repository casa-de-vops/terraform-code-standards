parameters:
  - name: workload
    type: string
  - name: environments
    type: object
  - name: working_directory
    type: string
    default: 'terraform'
  - name: tf_version
    type: string
    default: 'latest'
  - name: securevars_file
    type: string
    default: ''
  - name: plan_file_name
    type: string
    default: 'terraform.tfplan'

stages:
# TF Validate
- ${{ each environment in parameters.environments }}:
  - stage: ValidateStage${{ environment.environment }}
    displayName: "Validate [${{ environment.environment }}-${{ parameters.workload }}]"
    dependsOn: []
    variables:
      - ${{ if eq(environment.environment, 'prod') }}:
        - template: ./variables/variables.prod.yml
      - ${{ else }}:
        - template: ./variables/variables.nonprod.yml
    jobs:
      - job: TerraformValidateJob
        displayName: 'Terraform Validate'
        ${{ if variables['environment.pool'] }}:
          pool: ${{ variables['environment.pool'] }}
        ${{ if and(not(variables['environment.pool']), eq(variables['environment.agent_image'], '')) }}:
          pool:
            vmImage: ${{ variables['environment.vmImage'] }}
        ${{ if and(not(variables['environment.pool']), ne(variables['environment.agent_image'], '')) }}:
          pool:
            vmImage: $(default_agent_image)
        steps:
          - template: ./tasks/tf_install_task.yml
            parameters:
              tf_version: '${{ parameters.tf_version }}'
          - template: ./tasks/tf_replace_token.yml
            parameters:
              sources: '$(System.DefaultWorkingDirectory)/${{ parameters.working_directory }}/**'
              missingVarAction: 'keep'
              logLevel: 'error'
          - template: ./tasks/tf_init_task.yml
            parameters:
              working_directory: '$(System.DefaultWorkingDirectory)/${{ parameters.working_directory }}' 
              backend_service_connection: '${{ coalesce(environment.backend_service_connection, environment.azure_service_connection) }}'
              backend_azure_rm_resource_group_name: '${{ environment.backend_azure_rm_resource_group_name }}'
              backend_azure_rm_storage_account_name: '${{ environment.backend_azure_rm_storage_account_name }}'
              backend_azure_rm_container_name: '${{ environment.backend_azure_rm_container_name }}'
              backend_azure_rm_key: '${{ environment.backend_azure_rm_key }}' 
          - template: ./tasks/tf_validate_task.yml
            parameters:
              working_directory: '$(System.DefaultWorkingDirectory)/${{ parameters.working_directory }}' 
              azurerm_service_connection: ${{ environment.azure_service_connection }}
              tfvars_file: '${{ environment.tfvars_file }}'
              securevars_file: '${{ parameters.securevars_file }}'

## TF Plan
- ${{ each environment in parameters.environments }}:
  - stage: PlanStage${{environment.environment}}
    displayName: "Plan [${{ environment.environment }}-${{ parameters.workload }}]"
    dependsOn:
      - ValidateStage${{environment.environment}}
    variables:
      - ${{ if eq(environment.environment, 'prod') }}:
        - template: ./variables/variables.prod.yml
      - ${{ else }}:
        - template: ./variables/variables.nonprod.yml
    jobs:
      - job: TerraformPlanJob
        displayName: 'Terraform Plan'
        ${{ if variables['environment.pool'] }}:
          pool: ${{ variables['environment.pool'] }}
        ${{ if and(not(variables['environment.pool']), eq(variables['environment.vmImage'], '')) }}:
          pool:
            vmImage: $(default_agent_image)
        ${{ if and(not(variables['environment.pool']), ne(variables['environment.vmImage'], '')) }}:
          pool:
            vmImage: ${{ variables['environment.vmImage'] }}
        steps:
          - template: ./tasks/tf_install_task.yml
            parameters:
              tf_version: '${{ parameters.tf_version }}'
          - template: ./tasks/tf_replace_token.yml
            parameters:
              sources: '$(System.DefaultWorkingDirectory)/${{ parameters.working_directory }}/**'
              missingVarAction: 'keep'
              logLevel: 'error'
          - template: ./tasks/tf_init_task.yml
            parameters:
              working_directory: '$(System.DefaultWorkingDirectory)/${{ parameters.working_directory }}' 
              backend_service_connection:  '${{ coalesce(environment.backend_service_connection, environment.azure_service_connection) }}'
              backend_azure_rm_resource_group_name: '${{ environment.backend_azure_rm_resource_group_name }}'
              backend_azure_rm_storage_account_name: '${{ environment.backend_azure_rm_storage_account_name }}'
              backend_azure_rm_container_name: '${{ environment.backend_azure_rm_container_name }}'
              backend_azure_rm_key: '${{ environment.backend_azure_rm_key }}' 
          - template: ./tasks/tf_plan_task.yml
            parameters:
              azurerm_service_connection: ${{ environment.azure_service_connection }}
              working_directory: '$(System.DefaultWorkingDirectory)/${{ parameters.working_directory }}' 
              workload: '${{ parameters.workload }}'
              environment: '${{ environment.environment }}'
              securevars_file: ${{ parameters.securevars_file }}
              tfvars_file: '${{ environment.tfvars_file }}'
              destroy_mode: ${{ coalesce(environment.destroy_mode, false) }}
              command_option_args: '${{ environment.command_option_args }}'

# TF Security Scan
- ${{ each environment in parameters.environments }}:
  - stage: InspectStage${{ environment.environment }}
    displayName: "Inspect [${{ environment.environment }}-${{ parameters.workload }}]"
    dependsOn:
      - ValidateStage${{environment.environment}}
      - PlanStage${{environment.environment}}
    variables:
      - ${{ if eq(environment.environment, 'prod') }}:
        - template: ./variables/variables.prod.yml
      - ${{ else }}:
        - template: ./variables/variables.nonprod.yml
    jobs:
      - job: TerraformInspectJob
        displayName: 'Terraform Security Scan'
        ${{ if variables['environment.pool'] }}:
          pool: ${{ variables['environment.pool'] }}
        ${{ if and(not(variables['environment.pool']), eq(variables['environment.agent_image'], '')) }}:
          pool:
            vmImage: ${{ variables['environment.vmImage'] }}
        ${{ if and(not(variables['environment.pool']), ne(variables['environment.agent_image'], '')) }}:
          pool:
            vmImage: $(default_agent_image)
        steps:
          - template: ./tasks/tf_sec.yml
            parameters:
              working_directory: '$(System.DefaultWorkingDirectory)/${{ parameters.working_directory }}'
              run_tfsec: '${{ coalesce(environment.run_tfsec, true) }}'
              run_msdefender: '${{ coalesce(environment.run_msdefender, true) }}'
              
## TF Apply
- ${{ each environment in parameters.environments }}:
  - stage: ApplyStage${{environment.environment}}
    ${{ if eq(parameters.tf_destroy_mode, true) }}:
      displayName: 'Apply (Destroy) [${{ environment.environment }}-${{ parameters.workload }}]'
    ${{ else }}:
      displayName: 'Apply [${{ environment.environment }}-${{ parameters.workload }}]'
    dependsOn:
      - InspectStage${{environment.environment}}
      - PlanStage${{environment.environment}}
      - ValidateStage${{environment.environment}}
    condition: and(succeeded(), or(eq(variables['Build.SourceBranchName'], 'release'), eq(variables['Build.SourceBranchName'], 'main')), eq(dependencies.PlanStage${{ replace(replace(environment.environment, '/', '_'), '-', '_') }}.outputs['TerraformPlanJob.terraformPlanStatus.hasChanges'], 'true'))
    variables:
      - ${{ if eq(environment.environment, 'prod') }}:
        - template: ./variables/variables.prod.yml
      - ${{ else }}:
        - template: ./variables/variables.nonprod.yml
    jobs:
      - deployment: TerraformApplyJob
        timeoutInMinutes: 180
        displayName: 'Terraform Apply'
        environment: '${{ parameters.workload }}-${{ environment.ado_environment }}'
        ${{ if variables['environment.pool'] }}:
          pool: ${{ variables['environment.pool'] }}
        ${{ if and(not(variables['environment.pool']), eq(variables['environment.agent_image'], '')) }}:
          pool:
            vmImage: ${{ variables['environment.vmImage'] }}
        ${{ if and(not(variables['environment.pool']), ne(variables['environment.agent_image'], '')) }}:
          pool:
            vmImage: $(default_agent_image)
        strategy:
          runOnce:
            deploy:
              steps:
                - download: none
                # Download TF plan artifact
                - task: DownloadPipelineArtifact@2
                  displayName: 'Download plan'
                  inputs:
                    source: 'current'
                    artifact: terraform_${{ replace(replace(environment.environment, '/', '_'), '-', '_') }}_plan
                    path: $(System.DefaultWorkingDirectory)/plan/
                - task: Bash@3
                  displayName: 'List files in plan directory'
                  inputs:
                    targetType: 'inline'
                    script: 'ls -la $(System.DefaultWorkingDirectory)/plan/'
                # Install terraform
                - template: ./tasks/tf_install_task.yml
                  parameters:
                    tf_version: '${{ parameters.tf_version }}'
                - template: ./tasks/tf_init_task.yml
                  parameters:
                    working_directory: '$(System.DefaultWorkingDirectory)/plan/${{ parameters.working_directory }}' 
                    backend_service_connection:  '${{ coalesce(environment.backend_service_connection, environment.azure_service_connection) }}'
                    backend_azure_rm_resource_group_name: '${{ environment.backend_azure_rm_resource_group_name }}'
                    backend_azure_rm_storage_account_name: '${{ environment.backend_azure_rm_storage_account_name }}'
                    backend_azure_rm_container_name: '${{ environment.backend_azure_rm_container_name }}'
                    backend_azure_rm_key: '${{ environment.backend_azure_rm_key }}' 
                # TF apply
                - template: ./tasks/tf_apply_task.yml
                  parameters:
                    working_directory: '$(System.DefaultWorkingDirectory)/plan/${{ parameters.working_directory }}' 
                    azurerm_service_connection: ${{ environment.azure_service_connection }}
                    command_option_args: '${{ environment.step_apply_command_option_args }}'
                    destroy_mode: ${{ coalesce(environment.destroy_mode, false) }}
                    plan_file_name: '${{ parameters.plan_file_name }}'
                    # log_level: '${{ parameters.tf_log_level }}'