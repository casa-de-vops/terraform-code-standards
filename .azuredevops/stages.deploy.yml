parameters:
  - name: workload
    type: string
  - name: environments
    type: object
  - name: working_directory
    type: string
    default: 'terraform'
  - name: tf_version
    type: string
    default: 'latest'
  - name: securevars_file
    type: string
    default: null
  - name: install_ssh
    type: boolean
    default: true
  - name: plan_file_name
    type: string
    default: 'terraform.tfplan'

stages:
# TF Validate
- ${{ each environment in parameters.environments }}:
  - stage: ValidateStage${{ environment.environment }}
    displayName: "Validate [${{ parameters.workload }}-${{ environment.environment }}]"
    dependsOn: []
    jobs:
      - job: TerraformValidateJob
        displayName: 'Terraform Validate'
        ${{ if eq(environment.vmImage, null) }}:
          pool:
            vmImage: Ubuntu-20.04
        ${{ if environment.vmImage }}:
          pool:
            vmImage: ${{ environment.vmImage }}
        ${{ else }}:
          pool: ${{ environment.pool }}
        steps:
          - template: ./tasks/tf_install_task.yml
            parameters:
              tf_version: '${{ parameters.tf_version }}'
          - template: ./tasks/tf_replace_token.yml
            parameters:
              sources: '$(System.DefaultWorkingDirectory)/${{ parameters.working_directory }}/**'
              missingVarAction: 'keep'
              logLevel: 'error'
          - template: ./tasks/tf_init_task.yml
            parameters:
              azure_service_connection: '${{ environment.azure_service_connection }}'
              working_directory: '$(System.DefaultWorkingDirectory)/${{ parameters.working_directory }}' 
              install_ssh: '${{ parameters.install_ssh }}'
              securevars_file: ${{ parameters.securevars_file }}
              backend_service_connection: ${{ environment.backend_service_connection }}
              backend_azure_rm_resource_group_name: '${{ environment.backend_azure_rm_resource_group_name }}'
              backend_azure_rm_storage_account_name: '${{ environment.backend_azure_rm_storage_account_name }}'
              backend_azure_rm_container_name: '${{ environment.backend_azure_rm_container_name }}'
              backend_azure_rm_key: '${{ environment.backend_azure_rm_key }}' 
          - template: ./tasks/tf_validate_task.yml
            parameters:
              working_directory: '$(System.DefaultWorkingDirectory)/${{ parameters.working_directory }}' 
              azurerm_service_connection: '${{ environment.azure_service_connection }}'
              tfvars_file: '${{ environment.tfvars_file }}'
              securevars_file: '${{ parameters.securevars_file }}'
## TF Plan
- ${{ each environment in parameters.environments }}:
  - stage: PlanStage${{environment.environment}}
    displayName: "Plan [${{ parameters.workload }}-${{ environment.environment }}]"
    dependsOn:
      - ValidateStage${{environment.environment}}
    jobs:
      - job: TerraformPlanJob
        displayName: 'Terraform Plan'
        ${{ if environment.vmImage }}:
          pool:
            vmImage: ${{ environment.vmImage }}
        ${{ if not(environment.vmImage) }}:
          pool: ${{ environment.pool }}
        steps:
          - template: ./tasks/tf_install_task.yml
            parameters:
              tf_version: '${{ parameters.tf_version }}'
          - template: ./tasks/tf_replace_token.yml
            parameters:
              sources: '$(System.DefaultWorkingDirectory)/${{ parameters.working_directory }}/**'
              missingVarAction: 'keep'
              logLevel: 'error'
          - template: ./tasks/tf_init_task.yml
            parameters:
              azure_service_connection: '${{ environment.azure_service_connection }}'
              working_directory: '$(System.DefaultWorkingDirectory)/${{ parameters.working_directory }}' 
              install_ssh: '${{ parameters.install_ssh }}'
              securevars_file: ${{ parameters.securevars_file }}
              # tfvars_file: ${{ parameters.tfvars_file }}
              backend_service_connection: ${{ environment.backend_service_connection }}
              backend_azure_rm_resource_group_name: '${{ environment.backend_azure_rm_resource_group_name }}'
              backend_azure_rm_storage_account_name: '${{ environment.backend_azure_rm_storage_account_name }}'
              backend_azure_rm_container_name: '${{ environment.backend_azure_rm_container_name }}'
              backend_azure_rm_key: '${{ environment.backend_azure_rm_key }}' 
          - template: ./tasks/tf_plan_task.yml
            parameters:
              azurerm_service_connection: ${{ environment.azure_service_connection }}
              working_directory: '$(System.DefaultWorkingDirectory)/${{ parameters.working_directory }}' 
              workload: '${{ parameters.workload }}'
              environment: '${{ environment.environment }}'
              securevars_file: ${{ parameters.securevars_file }}
              tfvars_file: '${{ environment.tfvars_file }}'
              destroy_mode: '${{ environment.destroy_mode }}'
              command_option_args: '${{ environment.command_option_args }}'

## TF Apply
- ${{ each environment in parameters.environments }}:
  # TF Apply
  - stage: ApplyStage${{environment.environment}}
    ${{ if eq(parameters.tf_destroy_mode, true) }}:
      displayName: 'Apply (Destroy) [${{ parameters.workload }}-${{ environment.environment }}]'
    ${{ else }}:
      displayName: 'Apply [${{ parameters.workload }}-${{ environment.environment }}]'
    dependsOn:
      # - InspectStage${{environment.environment}}
      - PlanStage${{environment.environment}}
      - ValidateStage${{environment.environment}}
    condition: and(succeeded(), or(eq(variables['Build.SourceBranchName'], 'release'), eq(variables['Build.SourceBranchName'], 'main')), eq(dependencies.PlanStage${{ replace(replace(environment.environment, '/', '_'), '-', '_') }}.outputs['TerraformPlanJob.terraformPlanStatus.hasChanges'], 'true'))
    # variables:
    #   - name: ci_source_repository
    #     value: $[ resources.repositories.${{ parameters.ci_source_repo_alias }}.name ]
    jobs:
      - deployment: TerraformApplyJob
        timeoutInMinutes: 180
        displayName: 'Terraform Apply'
        environment: '${{ parameters.workload }}-${{ environment.environment }}'
        ${{ if environment.vmImage }}:
          pool:
            vmImage: ${{ environment.vmImage }}
        ${{ else }}:
          pool: ${{ environment.pool }}
        strategy:
          runOnce:
            deploy:
              steps:
                - download: none
                # Download TF plan artifact
                - task: DownloadPipelineArtifact@2
                  displayName: 'Download plan'
                  inputs:
                    source: 'current'
                    artifact: terraform_${{ replace(replace(environment.environment, '/', '_'), '-', '_') }}_plan
                    path: $(System.DefaultWorkingDirectory)/apply/${{ parameters.working_directory }}
                # Install terraform
                - template: ./tasks/tf_install_task.yml
                  parameters:
                    tf_version: '${{ parameters.tf_version }}'
                - template: ./tasks/tf_init_task.yml
                  parameters:
                    azure_service_connection: '${{ environment.azure_service_connection }}'
                    working_directory: '$(System.DefaultWorkingDirectory)/${{ parameters.working_directory }}' 
                    install_ssh: '${{ parameters.install_ssh }}'
                    securevars_file: ${{ parameters.securevars_file }}
                    # tfvars_file: ${{ parameters.tfvars_file }}
                    backend_service_connection: ${{ environment.backend_service_connection }}
                    backend_azure_rm_resource_group_name: '${{ environment.backend_azure_rm_resource_group_name }}'
                    backend_azure_rm_storage_account_name: '${{ environment.backend_azure_rm_storage_account_name }}'
                    backend_azure_rm_container_name: '${{ environment.backend_azure_rm_container_name }}'
                    backend_azure_rm_key: '${{ environment.backend_azure_rm_key }}' 
                # TF apply
                - template: ./tasks/tf_apply_task.yml
                  parameters:
                    working_directory: '$(System.DefaultWorkingDirectory)/${{ parameters.working_directory }}' 
                    azurerm_service_connection: ${{ environment.azure_service_connection }}
                    command_option_args: ${{ environment.step_apply_command_option_args }}
                    destroy_mode: ${{ parameters.tf_destroy_mode }}
                    plan_file_name: ${{ parameters.plan_file_name }}
                    securevars_file: ${{ parameters.securevars_file }}
                    # log_level: '${{ parameters.tf_log_level }}'