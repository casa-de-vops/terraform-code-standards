# .github/tests/pipeline.deploy.yaml
name: Trigger Terraform Orchestration

on:
  push:
    branches:
      - github_actions
  workflow_dispatch:
    inputs:
      tf_version:
        description: 'Terraform version'
        required: false
        default: 'latest'
        type: string
      working_directory:
        description: 'Working directory'
        required: true
        default: 'terraform/'
        type: string
      environment:
        description: 'Environment of the infrastructure workload'
        required: true
        default: 'dev'
        type: string
      gh_environment:
        description: 'Environment to deploy to'
        required: true
        default: 'nonprod'
        type: string
      plan_file_name:
        description: 'Terraform plan file name'
        required: false
        default: 'terraform.tfplan'
        type: string
      var_file:
        description: 'Terraform variables file'
        required: false
        default: '../environments/dev.tfvars'
        type: string
env:
  backend_config: |
    {
      "backend_service_connection": "terraform",
      "backend_azure_rm_resource_group_name": "rg-terraform-ops",
      "backend_azure_rm_storage_account_name": "casadevopsterraform",
      "backend_azure_rm_container_name": "ops-terraform-state",
      "backend_azure_rm_key": "pipeline-test.dev.tfstate"
    }
            
jobs:
  my-job:
    runs-on: ubuntu-latest
    steps:
      - name: my-step
        run: echo "Hello World!"
            
  tf-orchestrations:
    uses: ./orchestrations/stages.deploy.yml
    with:
      tf_version: ${{ github.event.inputs.tf_version }}
      working_directory: ${{ github.event.inputs.working_directory }}
      environment: ${{ github.event.inputs.environment }}
      backend_configs: ${{ github.event.inputs.backend_configs }}
      plan_file_name: ${{ github.event.inputs.plan_file_name }}
      var_file: ${{ github.event.inputs.var_file }}
