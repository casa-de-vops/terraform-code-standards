# .github/workflows/stages.deploy.yml
name: Terraform CI/CD Orchestration

on:
  workflow_call:
    inputs:
      tf_version:
        description: 'Terraform version'
        required: false
        default: 'latest'
        type: string
      working_directory:
        description: 'Working directory'
        required: true
        type: string
      environment:
        description: 'Environment to deploy to'
        required: true
        type: string
      gh_environment:
        description: 'GitHub environment'
        required: true
        type: string
      backend_service_connection:
        description: 'Backend service connection'
        required: true
        type: string
      backend_azure_rm_resource_group_name:
        description: 'Azure Resource Group Name'
        required: true
        type: string
      backend_azure_rm_storage_account_name:
        description: 'Azure Storage Account Name'
        required: true
        type: string
      backend_azure_rm_container_name:
        description: 'Azure Container Name'
        required: true
        type: string
      backend_azure_rm_key:
        description: 'Azure Key'
        required: true
        type: string
      plan_file_name:
        description: 'Terraform plan file name'
        required: false
        default: 'terraform.tfplan'
        type: string
      var_file:
        description: 'Terraform variables file'
        required: false
        default: ''
        type: string

jobs:
  login:
    name: Login Test
    runs-on: ubuntu-latest
    environment: 'nonprod'
    steps:
      - name: Debug Secrets Access
        run: |
          echo "AZURE_CLIENT_ID=${{ secrets.AZURE_CLIENT_ID }}"
          echo "AZURE_TENANT_ID=${{ secrets.AZURE_TENANT_ID }}"
          echo "AZURE_SUBSCRIPTION_ID=${{ secrets.AZURE_SUBSCRIPTION_ID }}"

      - name: Azure login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Azure CLI script
        uses: azure/cli@v2
        with:
          azcliversion: latest
          inlineScript: |
            az account show    


  # validate:
  #   name: Validate Stage
  #   runs-on: ubuntu-latest
  #   environment: 'nonprod'
  #   steps:
  #     - name: Hello World Step
  #       run: echo "Hello World! ${{ inputs.tf_version }}"
      
  #     - name: Debug Secrets Access
  #       run: |
  #         echo "Environment: ${{ inputs.gh_environment }}"
  #         echo "AZURE_CLIENT_ID=${{ secrets.AZURE_CLIENT_ID }}"
  #         echo "AZURE_TENANT_ID=${{ secrets.AZURE_TENANT_ID }}"
  #         echo "AZURE_SUBSCRIPTION_ID=${{ secrets.AZURE_SUBSCRIPTION_ID }}"
      
  #     - name: Debug Backend Configs
  #       run: |
  #         echo "backend_service_connection=${{ inputs.backend_service_connection }}"
  #         echo "backend_azure_rm_resource_group_name=${{ inputs.backend_azure_rm_resource_group_name }}"
  #         echo "backend_azure_rm_storage_account_name=${{ inputs.backend_azure_rm_storage_account_name }}"
  #         echo "backend_azure_rm_container_name=${{ inputs.backend_azure_rm_container_name }}"
  #         echo "backend_azure_rm_key=${{ inputs.backend_azure_rm_key }}"

  #     - name: Checkout Code
  #       uses: actions/checkout@v3

  #     - name: Azure login
  #       uses: azure/login@v2
  #       with:
  #         client-id: ${{ secrets.AZURE_CLIENT_ID }}
  #         tenant-id: ${{ secrets.AZURE_TENANT_ID }}
  #         subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

  #     - name: Azure CLI script
  #       uses: azure/cli@v2
  #       with:
  #         azcliversion: latest
  #         inlineScript: |
  #           az account show

  #     - name: List Contents of Current Directory and Terraform Directory
  #       run: |
  #         echo "Listing contents of the current directory:"
  #         find . || echo "No files found in the current directory."
          
  #         echo "Listing contents of the Terraform working directory:"
  #         find ${{ inputs.working_directory }} || echo "No files found in the Terraform working directory."

  #     - name: Install Terraform
  #       uses: hashicorp/setup-terraform@v2
  #       with:
  #         terraform_version: ${{ inputs.tf_version }}

  #     - name: Check Terraform Formatting
  #       run: terraform fmt --check --diff -recursive
  #       working-directory: ${{ inputs.working_directory }}

  #     - name: Initialize Terraform
  #       run: |
  #         terraform init -input=false \
  #         -backend-config="storage_account_name=${{ inputs.backend_configs.backend_azure_rm_storage_account_name }}" \
  #         -backend-config="container_name=${{ inputs.backend_configs.backend_azure_rm_container_name }}" \
  #         -backend-config="key=${{ inputs.backend_configs.backend_azure_rm_key }}" \
  #         -backend-config="resource_group_name=${{ inputs.backend_configs.backend_azure_rm_resource_group_name }}"
  #       working-directory: ${{ inputs.working_directory }}
      
  #     - name: Validate Terraform
  #       run: terraform validate
  #       working-directory: ${{ inputs.working_directory }}
        
  # plan:
  #     name: Plan Stage
  #     runs-on: ubuntu-latest
  #     needs: validate
  #     steps:
  #       - name: Checkout Code
  #         uses: actions/checkout@v3

  #       - name: Azure login
  #         uses: azure/login@v2
  #         with:
  #           client-id: ${{ secrets.AZURE_CLIENT_ID }}
  #           tenant-id: ${{ secrets.AZURE_TENANT_ID }}
  #           subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

  #       - name: Install Terraform
  #         uses: hashicorp/setup-terraform@v2
  #         with:
  #           terraform_version: ${{ inputs.tf_version }}

  #       - name: Initialize Terraform
  #         run: |
  #           terraform init -input=false \
  #           -backend-config="storage_account_name=${{ inputs.backend_configs.backend_azure_rm_storage_account_name }}" \
  #           -backend-config="container_name=${{ inputs.backend_configs.backend_azure_rm_container_name }}" \
  #           -backend-config="key=${{ inputs.backend_configs.backend_azure_rm_key }}" \
  #           -backend-config="resource_group_name=${{ inputs.backend_configs.backend_azure_rm_resource_group_name }}"
  #         working-directory: ${{ inputs.working_directory }}

  #       - name: Plan Terraform
  #         run: terraform plan -out=${{ inputs.plan_file_name }} -var-file=${{ inputs.var_file }}
  #         working-directory: ${{ inputs.working_directory }}

  # apply:
  #   name: Apply Stage
  #   runs-on: ubuntu-latest
  #   needs: plan
  #   steps:
  #     - name: Checkout Code
  #       uses: actions/checkout@v3

  #     - name: Login to Azure
  #       uses: azure/login@v1
  #       with:
  #         creds: ${{ secrets.AZURE_CREDENTIALS }}

  #     - name: Install Terraform
  #       uses: hashicorp/setup-terraform@v2
  #       with:
  #         terraform_version: ${{ inputs.tf_version }}

  #     - name: Initialize Terraform
  #       run: |
  #         terraform init -input=false \
  #         -backend-config="storage_account_name=${{ inputs.backend_configs.backend_azure_rm_storage_account_name }}" \
  #         -backend-config="container_name=${{ inputs.backend_configs.backend_azure_rm_container_name }}" \
  #         -backend-config="key=${{ inputs.backend_configs.backend_azure_rm_key }}" \
  #         -backend-config="resource_group_name=${{ inputs.backend_configs.backend_azure_rm_resource_group_name }}"
  #       working-directory: ${{ inputs.working_directory }}

  #     - name: Apply Terraform
  #       run: terraform apply -input=false -auto-approve -var-file=${{ inputs.var_file }} ${{
  #           inputs.plan_file_name }}
  #       working-directory: ${{ inputs.working_directory }}